// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// HelpdeskEddyTicket defines model for HelpdeskEddyTicket.
type HelpdeskEddyTicket struct {
	DepartmentId int       `json:"DepartmentId"`
	Description  string    `json:"Description"`
	ID           string    `json:"ID"`
	PriorityId   int       `json:"PriorityId"`
	Time         time.Time `json:"Time"`
	Title        string    `json:"Title"`
	TypeId       int       `json:"TypeId"`
}

// HelpdeskEddyTicketList defines model for HelpdeskEddyTicketList.
type HelpdeskEddyTicketList = []HelpdeskEddyTicket

// LibreBreadSMSIds defines model for LibreBreadSMSIds.
type LibreBreadSMSIds = []string

// SMS defines model for SMS.
type SMS struct {
	From     string    `json:"From"`
	ID       string    `json:"ID"`
	Provider string    `json:"Provider"`
	Text     string    `json:"Text"`
	Time     time.Time `json:"Time"`
	To       string    `json:"To"`
}

// SMSList defines model for SMSList.
type SMSList = []SMS

// GetHelpdeskEddyTicketParams defines parameters for GetHelpdeskEddyTicket.
type GetHelpdeskEddyTicketParams struct {
	// The number of latest sms
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Should be JSON response
	Json *bool `form:"json,omitempty" json:"json,omitempty"`
}

// GetSmsParams defines parameters for GetSms.
type GetSmsParams struct {
	// The number of latest sms
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Should be JSON response
	Json *bool `form:"json,omitempty" json:"json,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Create HelpdeskEddy ticket
	// (POST /api/v2/tickets)
	PostHelpdeskEddyTicket(w http.ResponseWriter, r *http.Request)
	// List tickets
	// (GET /helpdesk)
	GetHelpdeskEddyTicket(w http.ResponseWriter, r *http.Request, params GetHelpdeskEddyTicketParams)

	// (POST /libre/check)
	PostLibreCheck(w http.ResponseWriter, r *http.Request)
	// Send the fake SMS
	// (POST /libre/send)
	PostLibreSend(w http.ResponseWriter, r *http.Request)
	// Returns a list of SMS.
	// (GET /sms)
	GetSms(w http.ResponseWriter, r *http.Request, params GetSmsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostHelpdeskEddyTicket operation middleware
func (siw *ServerInterfaceWrapper) PostHelpdeskEddyTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHelpdeskEddyTicket(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetHelpdeskEddyTicket operation middleware
func (siw *ServerInterfaceWrapper) GetHelpdeskEddyTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHelpdeskEddyTicketParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "json" -------------
	if paramValue := r.URL.Query().Get("json"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "json", r.URL.Query(), &params.Json)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "json", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHelpdeskEddyTicket(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostLibreCheck operation middleware
func (siw *ServerInterfaceWrapper) PostLibreCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLibreCheck(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostLibreSend operation middleware
func (siw *ServerInterfaceWrapper) PostLibreSend(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLibreSend(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSms operation middleware
func (siw *ServerInterfaceWrapper) GetSms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "json" -------------
	if paramValue := r.URL.Query().Get("json"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "json", r.URL.Query(), &params.Json)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "json", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSms(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v2/tickets", wrapper.PostHelpdeskEddyTicket)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/helpdesk", wrapper.GetHelpdeskEddyTicket)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/libre/check", wrapper.PostLibreCheck)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/libre/send", wrapper.PostLibreSend)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sms", wrapper.GetSms)
	})

	return r
}
