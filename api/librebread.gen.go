// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
	"net/http"
	"time"
)

// LibreBreadSMSIds defines model for LibreBreadSMSIds.
type LibreBreadSMSIds []string

// SMS defines model for SMS.
type SMS struct {
	From     string    `json:"From"`
	ID       string    `json:"ID"`
	Provider string    `json:"Provider"`
	Text     string    `json:"Text"`
	Time     time.Time `json:"Time"`
	To       string    `json:"To"`
}

// SMSes defines model for SMSes.
type SMSes []SMS

// GetSmsParams defines parameters for GetSms.
type GetSmsParams struct {

	// The number of latest sms
	Limit *int64 `json:"limit,omitempty"`

	// Should be JSON response
	Json *bool `json:"json,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Create HelpdeskEddy ticket
	// (POST /api/v2/tickets)
	PostHelpdeskEddyTicket(w http.ResponseWriter, r *http.Request)

	// (POST /libre/check)
	PostLibreCheck(w http.ResponseWriter, r *http.Request)
	// Send the fake SMS
	// (POST /libre/send)
	PostLibreSend(w http.ResponseWriter, r *http.Request)
	// Returns a list of SMS.
	// (GET /sms)
	GetSms(w http.ResponseWriter, r *http.Request, params GetSmsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.Get(w, r.WithContext(ctx))
}

// PostHelpdeskEddyTicket operation middleware
func (siw *ServerInterfaceWrapper) PostHelpdeskEddyTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.PostHelpdeskEddyTicket(w, r.WithContext(ctx))
}

// PostLibreCheck operation middleware
func (siw *ServerInterfaceWrapper) PostLibreCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.PostLibreCheck(w, r.WithContext(ctx))
}

// PostLibreSend operation middleware
func (siw *ServerInterfaceWrapper) PostLibreSend(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.PostLibreSend(w, r.WithContext(ctx))
}

// GetSms operation middleware
func (siw *ServerInterfaceWrapper) GetSms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "json" -------------
	if paramValue := r.URL.Query().Get("json"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "json", r.URL.Query(), &params.Json)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter json: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetSms(w, r.WithContext(ctx), params)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Post("/api/v2/tickets", wrapper.PostHelpdeskEddyTicket)
	})
	r.Group(func(r chi.Router) {
		r.Post("/libre/check", wrapper.PostLibreCheck)
	})
	r.Group(func(r chi.Router) {
		r.Post("/libre/send", wrapper.PostLibreSend)
	})
	r.Group(func(r chi.Router) {
		r.Get("/sms", wrapper.GetSms)
	})

	return r
}
